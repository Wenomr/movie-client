{"version":3,"sources":["service/api-service.js","components/card.js","components/nav.js","components/select.js","components/app.js","components/movie.js","index.js"],"names":["ApiService","api_line","_apiBase","getResourceIN","url","a","fetch","res","ok","Error","status","console","log","json","getManyMoviesIN","sortBy","year","genre","data","method","body","JSON","stringify","headers","getMovieIN","id","getResource","getManyMoviesEx","includes","sort_line","genre_line","parseInt","year_line","result","results","getMovieEx","Card","state","rating","title","genres","poster","this","props","vote_average","poster_path","className","src","alt","to","class","Component","Nav","delay","ms","Promise","resolve","setTimeout","Select","handleChange","event","updateData","setState","target","name","value","handleYearChange","yearfilter","replace","onChange","type","min","max","App","elements","firstHalf","secondHalf","apiService","updateMovies","then","movies","map","movie","key","slice","Movie","match","params","overview","release_date","Main","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4b75980d.chunk.js","sourcesContent":["export default class ApiService {\r\n\r\n    api_line = '?api_key=8de2555c838007ddf3be91ec80ff332d';\r\n\r\n    _apiBase = 'http://localhost:5000/movies';\r\n\r\n    getResourceIN = async (url) => {\r\n        const res = await fetch (`${url}`);\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}, received ${res.status}.`)\r\n        }\r\n        console.log(res);\r\n        return await res.json();\r\n    };\r\n    \r\n    getManyMoviesIN = async (sortBy, year, genre) => {\r\n        const data = {  'count' : 8,\r\n                        'year' : year,\r\n                        'sortBy' : sortBy,\r\n                        'genre_id' : genre\r\n                        };\r\n\r\n        console.log(data);\r\n\r\n        const res = await fetch (`${this._apiBase}/`, {\r\n            method: 'POST', // или 'PUT'\r\n            body: JSON.stringify(data), // данные могут быть 'строкой' или {объектом}!\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch, received ${res.status}.`)\r\n        }\r\n        return await res.json();\r\n        \r\n    }\r\n  \r\n    getMovieIN = async (id) => {\r\n        // let url = `https://api.themoviedb.org/3/movie/${id}${api_line}&language=en-US`;\r\n        return this.getResource(`${this._apiBase}/id/${id}`);\r\n    }\r\n\r\n    \r\n    getManyMoviesEx = async (sortBy, year, genre) => {\r\n\r\n        const sort = [\"popularity.desc\", \"release_date.desc\", \"vote_average.desc\"]; // список доступных сортировок.\r\n        sort.includes(sortBy) ? sortBy += \"\" : sortBy = \"popularity.desc\";\r\n        let sort_line = `&sort_by=${sortBy}`;\r\n\r\n        let genre_line = ``;\r\n        genre_line = `&with_genres=${genre}`;\r\n        \r\n        let year_line;\r\n        if (parseInt(year) < 2020 && parseInt(year) > 1922) {\r\n            year = parseInt(year);\r\n            year_line = `&primary_release_year=${year}`;\r\n        } else {\r\n            year = false;\r\n            year_line = ``;\r\n        }\r\n\r\n        let url = `https://api.themoviedb.org/3/discover/movie${this.api_line}&language=en-US&vote_count.gte=900${sort_line}${genre_line}${year_line}`;\r\n\r\n        const res = await fetch (`${url}`);\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch, received ${res.status}.`)\r\n        }\r\n        let result = await res.json();\r\n        console.log(result.results);\r\n        return result.results;\r\n\r\n    }\r\n\r\n    getMovieEx = async (id) => {\r\n        let url = `https://api.themoviedb.org/3/movie/${id}${this.api_line}&language=en-US`;\r\n\r\n        const res = await fetch (`${url}`);\r\n        console.log(url);\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch, received ${res.status}.`)\r\n        }\r\n\r\n        let result = await res.json();\r\n        console.log(result);\r\n        return result;\r\n    }\r\n\r\n}","import React, { Component } from 'react';\r\nimport '../index.css';\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Card extends Component {\r\n    \r\n    state = {\r\n        id : 250,\r\n        rating : null,\r\n        title : null,\r\n        genres : null,\r\n        poster : null\r\n    };\r\n\r\n    render() {\r\n\r\n        const { id, vote_average, title, poster_path } = this.props.data;\r\n        return (\r\n            <div className=\"col\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-image\">\r\n                        <img className=\"card-img\" src = {\"https://image.tmdb.org/t/p/w400\"+ poster_path} alt = \"\"/>\r\n                    </div>\r\n                    <div className=\"card-content\">\r\n                        <span className = \"title\"><Link to = {`/movies/${id}`}>{ title }</Link></span>\r\n                        <p className = \"base-line\">\r\n                            <i class=\"material-icons\">star_half</i><strong>{ vote_average }/10</strong> \r\n                        </p>\r\n                        {/* <p className = \"small\">{ genre_titles.join(\" | \") }</p> */}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","\r\nimport React from 'react';\r\nimport '../index.css';\r\n\r\n\r\nconst Nav = () => {\r\n    return (\r\n       \r\n        <div className=\"col s12 m8 offset-m1 xl7 offset-xl1 center-on-small-only\">\r\n            <h4 className=\"light inputs\">Movie filters</h4>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { Component } from 'react';\r\nimport '../index.css';\r\n\r\nfunction delay(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n\r\nexport default class Select extends Component {\r\n\r\n    // constructor () {\r\n    //     super();\r\n    //     this.handleChange = this.handleChange.bind(this);\r\n    //     this.handleYearChange = this.handleYearChange.bind(this);\r\n    // }\r\n\r\n    state = {\r\n        sortBy : \"popularity.desc\",\r\n        year : \"1999\",\r\n        genre : \"\"\r\n    };\r\n    \r\n    handleChange = (event) => {\r\n        this.props.updateData();\r\n        this.setState({[event.target.name]: event.target.value}, () => {\r\n            this.props.updateData(this.state.sortBy, this.state.year, this.state.genre);\r\n        });\r\n    }\r\n\r\n    handleYearChange = (event) => {\r\n\r\n        console.log(event.target.value);\r\n        let yearfilter = event.target.value.replace(/\\D/,'');\r\n        this.setState({\r\n            year : yearfilter\r\n        }, async () => {\r\n            await delay(500);\r\n            this.props.updateData(this.state.sortBy, this.state.year, this.state.genre);\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className = \"centered\">\r\n                <select className=\"browser-default filter-item\" \r\n                        name = \"sortBy\"\r\n                        onChange={this.handleChange}>\r\n                    <option value = \"popularity.desc\">Popularity</option>\r\n                    <option value = \"vote_average.desc\">Rating</option>\r\n                    <option value = \"release_date.desc\">Release date</option>\r\n                </select>\r\n                <select \r\n                        className=\"browser-default filter-item\"\r\n                        name=\"genre\"\r\n                        onChange={this.handleChange}>\r\n                        <option value=\"28\">Action</option>\r\n                        <option value=\"12\">Adventure</option>\r\n                        <option value=\"16\">Animation</option>\r\n                        <option value=\"35\">Comedy</option>\r\n                        <option value=\"80\">Crime</option>\r\n                        <option value=\"99\">Documentary</option>\r\n                        <option value=\"18\">Drama</option>\r\n                        <option value=\"10751\">Family</option>\r\n                        <option value=\"14\">Fantasy</option>\r\n                        <option value=\"36\">History</option>\r\n                        <option value=\"27\">Horror</option>\r\n                        <option value=\"10402\">Music</option>\r\n                        <option value=\"9648\">Mystery</option>\r\n                        <option value=\"10749\">Romance</option>\r\n                        <option value=\"878\">Science Fiction</option>\r\n                        <option value=\"10770\">TV Movie</option>\r\n                        <option value=\"53\">Thriller</option>\r\n                        <option value=\"10752\">War</option>\r\n                        <option value=\"37\">Western</option>\r\n                        <option value=\"\">None</option>\r\n                </select>\r\n                {/* <input \r\n                    className = \"input-field year-input filter-item\"\r\n                    type = \"number\"\r\n                    placeholder = \"1999\"\r\n                    name = \"year\"\r\n                    value = {this.state.year} \r\n                    onChange={this.handleYearChange}\r\n                    disabled>\r\n                </input> */}\r\n                <p className = \"year-input\">{this.state.year}</p>\r\n                <p className=\"range-field \">\r\n                    <input type=\"range\" \r\n                        name=\"year\" \r\n                        min=\"1930\" \r\n                        max=\"2019\"\r\n                        value = {this.state.year} \r\n                        onChange={this.handleYearChange}\r\n                    />\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport ApiService from \"../service/api-service\";\r\nimport Card from './card';\r\nimport Nav from './nav';\r\nimport Select from './select';\r\n\r\nexport default class App extends Component {\r\n\r\n    constructor () {\r\n        super();\r\n        this.updateMovies();\r\n    }\r\n\r\n    state = {\r\n        elements : null,\r\n        firstHalf : null,\r\n        secondHalf : null,\r\n        year: null\r\n    };\r\n\r\n    apiService = new ApiService();\r\n\r\n    updateData = (sortBy, year, genre) => {\r\n        this.updateMovies(sortBy, year, genre);\r\n    }\r\n\r\n    //genre_id, year, \r\n    updateMovies = (sortBy, year, genre) => {\r\n        this.apiService\r\n        .getManyMoviesEx(sortBy, year, genre)\r\n        .then((movies) => {\r\n            console.log(movies);\r\n            const elements = movies.map((movie) => {\r\n                return (\r\n                    <Card key={movie.id} data={movie}/>\r\n                );\r\n              });\r\n              this.setState({\r\n                elements: elements,\r\n                firstHalf: elements.slice(0, 8)\r\n              })\r\n        });\r\n    };\r\n\r\n    \r\n    render() {\r\n        return (\r\n            <div className = \"container\">\r\n            <Nav/>\r\n            <div className = \"inputs\">\r\n                <Select updateData={this.updateData} />\r\n            </div>\r\n                <div className = \"section\">\r\n                    <header className = \"App-header\">\r\n                        <div className = \"row\">\r\n                            <div className = \"grid\">\r\n                                {this.state.firstHalf}\r\n                            </div>\r\n                        </div>\r\n                    </header>\r\n                </div>\r\n            </div>\r\n        );\r\n    }   \r\n}","import React, { Component } from 'react';\r\nimport ApiService from \"../service/api-service\";\r\n\r\nexport default class Movie extends Component {\r\n\r\n    state = {\r\n        id : null\r\n    };\r\n\r\n    apiService = new ApiService();\r\n\r\n    componentDidMount () {\r\n        const { id } = this.props.match.params\r\n        this.setState({id : id}, () => {\r\n            this.apiService\r\n            .getMovieEx(this.state.id)\r\n            .then((movie) => {\r\n                this.setState({\r\n                    id : movie.id,\r\n                    //genres : movie.genre_titles.join(\" | \"),\r\n                    title : movie.title,\r\n                    overview : movie.overview,\r\n                    vote_average : movie.vote_average,\r\n                    release_date : movie.release_date.replace(/-/g, '.'),\r\n                    poster_path : `https://image.tmdb.org/t/p/w400${movie.poster_path}`\r\n                })\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className = \"container\">\r\n\r\n                <div className=\"col s12 m8 offset-m1 xl7 offset-xl1 center-on-small-only little-margin\">\r\n                    <h2 className=\"light\">Details</h2>\r\n                </div>\r\n\r\n                <div className=\"movie-container card-panel\">\r\n                    \r\n                    <img src = {`${this.state.poster_path}`} alt = \"\"/>\r\n                    \r\n                    <div className = \"info-container\">\r\n                        <h3 className = \"light\"> { this.state.title } </h3>\r\n                        <p> { this.state.overview } </p>\r\n                        <p className = \"base-line\">\r\n                            <i className=\"material-icons\">star_half</i><strong>{ this.state.vote_average }/10</strong>  \r\n                        </p>\r\n                        <p> { this.state.release_date } </p>\r\n                        {/* <p className = \"small\"> { this.state.genres } </p> */}\r\n                    </div>\r\n                </div>\r\n            </div> \r\n        );\r\n    }\r\n}","\nimport React from 'react';\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport Movie from './components/movie';\nimport './index.css';\n\n\n\nexport default function Main() {\n  return (\n    <Router>\n      <div>\n        <nav className = \"grey darken-4\">\n          <ul>\n            <li>\n                <Link to=\"/\">Movies</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Switch>\n          <Route path=\"/movies/:id\" component = {Movie}/>\n          <Route path=\"/\">\n            <App />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nReactDOM.render(<Main />, document.getElementById('root'));\n"],"sourceRoot":""}